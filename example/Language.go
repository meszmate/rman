// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Language struct {
	_tab flatbuffers.Table
}

func GetRootAsLanguage(buf []byte, offset flatbuffers.UOffsetT) *Language {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Language{}
	x.Init(buf, n+offset)
	return x
}

func FinishLanguageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLanguage(buf []byte, offset flatbuffers.UOffsetT) *Language {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Language{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLanguageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Language) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Language) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Language) LanguageId() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Language) MutateLanguageId(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *Language) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LanguageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func LanguageAddLanguageId(builder *flatbuffers.Builder, languageId int8) {
	builder.PrependInt8Slot(0, languageId, 0)
}
func LanguageAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func LanguageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
