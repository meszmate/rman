// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuffer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChunkingParamEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsChunkingParamEntry(buf []byte, offset flatbuffers.UOffsetT) *ChunkingParamEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChunkingParamEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishChunkingParamEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsChunkingParamEntry(buf []byte, offset flatbuffers.UOffsetT) *ChunkingParamEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChunkingParamEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedChunkingParamEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ChunkingParamEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChunkingParamEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChunkingParamEntry) Unk0() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkingParamEntry) MutateUnk0(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *ChunkingParamEntry) ChunkingVersion() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkingParamEntry) MutateChunkingVersion(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ChunkingParamEntry) MinChunkSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkingParamEntry) MutateMinChunkSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ChunkingParamEntry) ChunkSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkingParamEntry) MutateChunkSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ChunkingParamEntry) MaxChunkSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkingParamEntry) MutateMaxChunkSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func ChunkingParamEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ChunkingParamEntryAddUnk0(builder *flatbuffers.Builder, unk0 uint16) {
	builder.PrependUint16Slot(0, unk0, 0)
}
func ChunkingParamEntryAddChunkingVersion(builder *flatbuffers.Builder, chunkingVersion byte) {
	builder.PrependByteSlot(1, chunkingVersion, 0)
}
func ChunkingParamEntryAddMinChunkSize(builder *flatbuffers.Builder, minChunkSize uint32) {
	builder.PrependUint32Slot(2, minChunkSize, 0)
}
func ChunkingParamEntryAddChunkSize(builder *flatbuffers.Builder, chunkSize uint32) {
	builder.PrependUint32Slot(3, chunkSize, 0)
}
func ChunkingParamEntryAddMaxChunkSize(builder *flatbuffers.Builder, maxChunkSize uint32) {
	builder.PrependUint32Slot(4, maxChunkSize, 0)
}
func ChunkingParamEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
