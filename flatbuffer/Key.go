// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuffer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Key struct {
	_tab flatbuffers.Table
}

func GetRootAsKey(buf []byte, offset flatbuffers.UOffsetT) *Key {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Key{}
	x.Init(buf, n+offset)
	return x
}

func FinishKeyBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsKey(buf []byte, offset flatbuffers.UOffsetT) *Key {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Key{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedKeyBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Key) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Key) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Key) Unk0() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Key) MutateUnk0(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *Key) Unk1() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Key) MutateUnk1(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func KeyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KeyAddUnk0(builder *flatbuffers.Builder, unk0 uint16) {
	builder.PrependUint16Slot(0, unk0, 0)
}
func KeyAddUnk1(builder *flatbuffers.Builder, unk1 uint32) {
	builder.PrependUint32Slot(1, unk1, 0)
}
func KeyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
