// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuffer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FileEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsFileEntry(buf []byte, offset flatbuffers.UOffsetT) *FileEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FileEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishFileEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFileEntry(buf []byte, offset flatbuffers.UOffsetT) *FileEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FileEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFileEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FileEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FileEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FileEntry) FileId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateFileId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *FileEntry) DirectoryId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateDirectoryId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *FileEntry) FileSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateFileSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *FileEntry) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileEntry) Flags() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateFlags(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *FileEntry) Unk5() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateUnk5(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *FileEntry) Unk6() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateUnk6(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *FileEntry) ChunkIds(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FileEntry) ChunkIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FileEntry) MutateChunkIds(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *FileEntry) Unk8() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateUnk8(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func (rcv *FileEntry) Link() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileEntry) Unk10() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateUnk10(n uint16) bool {
	return rcv._tab.MutateUint16Slot(24, n)
}

func (rcv *FileEntry) ChunkingParamId() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateChunkingParamId(n byte) bool {
	return rcv._tab.MutateByteSlot(26, n)
}

func (rcv *FileEntry) Permissions() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutatePermissions(n byte) bool {
	return rcv._tab.MutateByteSlot(28, n)
}

func FileEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func FileEntryAddFileId(builder *flatbuffers.Builder, fileId uint64) {
	builder.PrependUint64Slot(0, fileId, 0)
}
func FileEntryAddDirectoryId(builder *flatbuffers.Builder, directoryId uint64) {
	builder.PrependUint64Slot(1, directoryId, 0)
}
func FileEntryAddFileSize(builder *flatbuffers.Builder, fileSize uint32) {
	builder.PrependUint32Slot(2, fileSize, 0)
}
func FileEntryAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func FileEntryAddFlags(builder *flatbuffers.Builder, flags uint64) {
	builder.PrependUint64Slot(4, flags, 0)
}
func FileEntryAddUnk5(builder *flatbuffers.Builder, unk5 byte) {
	builder.PrependByteSlot(5, unk5, 0)
}
func FileEntryAddUnk6(builder *flatbuffers.Builder, unk6 byte) {
	builder.PrependByteSlot(6, unk6, 0)
}
func FileEntryAddChunkIds(builder *flatbuffers.Builder, chunkIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(chunkIds), 0)
}
func FileEntryStartChunkIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FileEntryAddUnk8(builder *flatbuffers.Builder, unk8 byte) {
	builder.PrependByteSlot(8, unk8, 0)
}
func FileEntryAddLink(builder *flatbuffers.Builder, link flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(link), 0)
}
func FileEntryAddUnk10(builder *flatbuffers.Builder, unk10 uint16) {
	builder.PrependUint16Slot(10, unk10, 0)
}
func FileEntryAddChunkingParamId(builder *flatbuffers.Builder, chunkingParamId byte) {
	builder.PrependByteSlot(11, chunkingParamId, 0)
}
func FileEntryAddPermissions(builder *flatbuffers.Builder, permissions byte) {
	builder.PrependByteSlot(12, permissions, 0)
}
func FileEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
